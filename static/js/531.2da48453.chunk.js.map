{"version":3,"file":"static/js/531.2da48453.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/Phonebook/CreateContact.module.css?394c","components/Phonebook/CreateContact.js","webpack://goit-react-hw-08-phonebook/./src/components/Contacts/ContactList.module.css?d8f1","components/Contacts/ContactsList.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","pages/Contacts.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["export const fetchContacts = state => {\n  return state.contacts.contacts.filter(contact =>\n    contact.name.toLowerCase().includes(state.contacts.query)\n  );\n};\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"CreateContact_form__7VGfr\",\"label\":\"CreateContact_label__gy2x-\",\"input\":\"CreateContact_input__voVK3\",\"btn\":\"CreateContact_btn__1aUL8\"};","import { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from '../../redux/contacts/operations';\nimport styles from './CreateContact.module.css';\n\nconst shortid = require('shortid');\n\nexport function PhonebookForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n  const onAddContacts = e => {\n    e.preventDefault();\n\n    const newContact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    const normalizeName = newContact.name.toLowerCase();\n    const isNameInContact = contacts.find(\n      newContact => newContact.name.toLowerCase() === normalizeName\n    );\n    isNameInContact\n      ? toast.success(`${newContact.name} is already in contacts`)\n      : dispatch(addContacts(newContact));\n    reset();\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case `name`:\n        setName(value);\n        break;\n      case `number`:\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={onAddContacts}>\n      <h3 className={styles.label}>Phonebook</h3>\n      <input\n        className={styles.input}\n        text=\"text\"\n        name=\"name\"\n        placeholder=\"Name\"\n        value={name}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <input\n        className={styles.input}\n        placeholder=\"Number \"\n        type=\"tel\"\n        value={number}\n        onChange={handleChange}\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button className={styles.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__3DsEX\",\"item\":\"ContactList_item__i5sst\",\"text\":\"ContactList_text__gmWSH\",\"btn\":\"ContactList_btn__wDIy8\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/operations';\nimport { fetchContacts } from '../../redux/contacts/selectors';\nimport styles from './ContactList.module.css';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(fetchContacts);\n\n  const dispatch = useDispatch();\n  const onDeleteContact = e => {\n    dispatch(deleteContacts(e.target.dataset.id));\n  };\n\n  return (\n    <ul className={styles.list}>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <li key={id} className={styles.item}>\n            <p className={styles.text}>{`${name} : ${number}`}</p>\n            <button\n              className={styles.btn}\n              onClick={onDeleteContact}\n              type=\"button\"\n              data-id={id}\n            >\n              Delete contact\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Filter_form__wVnxJ\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setQuery } from '../../redux/contacts/contacts.slice';\nimport styles from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const onChangeFilter = query => {\n    dispatch(setQuery(query));\n  };\n\n  return (\n    <div className={styles.form}>\n      <p className={styles.label}>Contacts</p>\n      <h4 className={styles.label}>Find your contact by name</h4>\n      <input\n        type=\"text\"\n        className={styles.input}\n        name=\"filter\"\n        placeholder=\"Search\"\n        onChange={e => onChangeFilter(e.target.value)}\n      />\n    </div>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { PhonebookForm } from '../components/Phonebook/CreateContact';\nimport { ContactsList } from '../components/Contacts/ContactsList';\nimport { Filter } from '../components/Filter/Filter';\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectIsLoading } from '../redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <PhonebookForm />\n\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactsList />\n    </>\n  );\n};\n\nexport default Contacts;\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["fetchContacts","state","contacts","filter","contact","name","toLowerCase","includes","query","selectContacts","selectIsLoading","isLoading","shortid","require","PhonebookForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","value","reset","className","styles","onSubmit","preventDefault","newContact","id","generate","normalizeName","isNameInContact","find","toast","addContacts","text","placeholder","onChange","pattern","title","required","type","ContactsList","onDeleteContact","deleteContacts","target","dataset","map","onClick","Filter","setQuery","useEffect","Helmet","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","ORIGINAL","setCharacters","_alphabet_","length","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}